import os
import json
import logging
import base64
import requests
import azure.functions as func
from openai import AzureOpenAI

client = AzureOpenAI(
    api_key=os.environ['AZURE_OPENAI_API_KEY'],
    api_version=os.environ['AZURE_OPENAI_API_VERSION'],
    azure_endpoint=os.environ['AZURE_OPENAI_ENDPOINT']
)

def post_comment(pr_id, repo_id, project, message):
    url = f"https://dev.azure.com/{project}/_apis/git/repositories/{repo_id}/pullRequests/{pr_id}/threads?api-version=7.1-preview.1"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Basic {os.environ['B64_PAT']}"
    }
    payload = {
        "comments": [{"parentCommentId": 0, "content": message, "commentType": 1}],
        "status": 1
    }
    response = requests.post(url, headers=headers, json=payload)
    logging.info(f"[Azure DevOps] Comment Response Status: {response.status_code}, Body: {response.text}")

def approve_pr(pr_id, repo_id, project, vote):
    url = f"https://dev.azure.com/{project}/_apis/git/repositories/{repo_id}/pullRequests/{pr_id}/reviewers/{project}%20Build%20Service?api-version=7.1-preview.1"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Basic {os.environ['B64_PAT']}"
    }
    payload = {"vote": vote}
    response = requests.put(url, headers=headers, json=payload)
    logging.info(f"[Azure DevOps] Review Vote Status: {response.status_code}, Body: {response.text}")

def get_changed_files(pr_id, repo_id, project):
    url = f"https://dev.azure.com/{project}/_apis/git/repositories/{repo_id}/pullRequests/{pr_id}/iterations/1/changes?api-version=7.1-preview.1"
    headers = {
        "Authorization": f"Basic {os.environ['B64_PAT']}"
    }
    response = requests.get(url, headers=headers)
    logging.info(f"[Azure DevOps] Changed files fetch: {response.status_code}")
    return response.json() if response.ok else {}

def review_code(code):
    prompt = f"Review the following code:\n\n{code}\n\nProvide feedback and whether it's acceptable."
    response = client.chat.completions.create(
        model=os.environ['AZURE_OPENAI_DEPLOYMENT'],
        messages=[{"role": "user", "content": prompt}],
        temperature=0.3
    )
    result = response.choices[0].message.content
    logging.info(f"[OpenAI] Review response: {result}")
    return result

def extract_code_from_patch(patch):
    # Simplified; customize if needed
    return patch if patch else "No patch available."

def main(req: func.HttpRequest) -> func.HttpResponse:
    logging.info("üîß Pull Request Review Function triggered")

    try:
        data = req.get_json()
        pr = data["resource"]
        pr_id = pr["pullRequestId"]
        repo_id = pr["repository"]["id"]
        project = pr["repository"]["project"]["name"]

        changes = get_changed_files(pr_id, repo_id, project)
        overall_approval = True

        for change in changes.get("changes", []):
            item = change.get("item", {})
            file_path = item.get("path", "Unknown file")
            patch = change.get("changeTrackingId", "")
            code = extract_code_from_patch(patch)

            review = review_code(code)
            post_comment(pr_id, repo_id, project, f"**{file_path}**:\n{review}")

            if "issue" in review.lower() or "reject" in review.lower():
                overall_approval = False

        # Vote: 10 = Approve, -10 = Reject
        approve_pr(pr_id, repo_id, project, vote=10 if overall_approval else -10)
        return func.HttpResponse("‚úÖ Pull Request reviewed", status_code=200)

    except Exception as e:
        logging.exception("‚ùå Error during PR review")
        return func.HttpResponse(f"Error: {str(e)}", status_code=500)
