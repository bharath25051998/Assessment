import logging
import os
import json
import base64
import requests
import azure.functions as func
from openai import AzureOpenAI

# Load environment variables
AZURE_OPENAI_ENDPOINT = os.environ["AZURE_OPENAI_ENDPOINT"]
AZURE_OPENAI_KEY = os.environ["AZURE_OPENAI_API_KEY"]
AZURE_OPENAI_DEPLOYMENT = os.environ["AZURE_OPENAI_DEPLOYMENT"]
AZURE_DEVOPS_ORG = os.environ["AZURE_DEVOPS_ORG"]
AZURE_DEVOPS_PROJECT = os.environ["AZURE_DEVOPS_PROJECT"]
REPO_ID = os.environ["REPO_ID"]
B64_PAT = os.environ["B64_PAT"]

# Setup OpenAI client
client = AzureOpenAI(
    api_key=AZURE_OPENAI_KEY,
    api_version="2024-02-15-preview",
    azure_endpoint=AZURE_OPENAI_ENDPOINT,
)

def get_changed_files(pr_id):
    url = f"https://dev.azure.com/{AZURE_DEVOPS_ORG}/{AZURE_DEVOPS_PROJECT}/_apis/git/repositories/{REPO_ID}/pullRequests/{pr_id}/iterations?api-version=7.1-preview.1"
    headers = {"Authorization": f"Basic {B64_PAT}"}
    response = requests.get(url, headers=headers)
    logging.info(f"[Azure DevOps] Iterations fetch: {response.status_code}")
    logging.debug(response.text)
    if response.status_code != 200:
        return []
    
    iterations = response.json()["value"]
    last_iteration = iterations[-1]["id"]

    url = f"https://dev.azure.com/{AZURE_DEVOPS_ORG}/{AZURE_DEVOPS_PROJECT}/_apis/git/repositories/{REPO_ID}/pullRequests/{pr_id}/iterations/{last_iteration}/changes?api-version=7.1-preview.1"
    response = requests.get(url, headers=headers)
    logging.info(f"[Azure DevOps] Changed files fetch: {response.status_code}")
    logging.debug(response.text)
    if response.status_code != 200:
        return []

    files = [change["item"]["path"] for change in response.json()["changes"] if "item" in change]
    return files

def post_comment(pr_id, file_path, comment):
    url = f"https://dev.azure.com/{AZURE_DEVOPS_ORG}/{AZURE_DEVOPS_PROJECT}/_apis/git/repositories/{REPO_ID}/pullRequests/{pr_id}/threads?api-version=7.1-preview.1"
    headers = {
        "Authorization": f"Basic {B64_PAT}",
        "Content-Type": "application/json"
    }
    payload = {
        "comments": [{
            "parentCommentId": 0,
            "content": f"üîç Review for `{file_path}`:\n{comment}",
            "commentType": 1
        }],
        "status": "active"
    }
    response = requests.post(url, headers=headers, json=payload)
    logging.info(f"[Azure DevOps] Comment Post Status: {response.status_code}")
    logging.debug(response.text)

def analyze_file(file_path):
    prompt = f"Review the following code file for issues and suggestions:\nFile path: {file_path}\nRespond briefly."
    response = client.chat.completions.create(
        model=AZURE_OPENAI_DEPLOYMENT,
        messages=[{"role": "user", "content": prompt}],
        temperature=0.2
    )
    result = response.choices[0].message.content
    logging.info("[OpenAI] Review Response:")
    logging.info(result)
    return result

def approve_pull_request(pr_id):
    url = f"https://dev.azure.com/{AZURE_DEVOPS_ORG}/{AZURE_DEVOPS_PROJECT}/_apis/git/repositories/{REPO_ID}/pullRequests/{pr_id}/reviewers/{AZURE_DEVOPS_ORG}?api-version=7.1-preview.1"
    headers = {
        "Authorization": f"Basic {B64_PAT}",
        "Content-Type": "application/json"
    }
    payload = { "vote": 10 }  # 10 = approve
    response = requests.put(url, headers=headers, json=payload)
    logging.info(f"[Azure DevOps] Review Vote Status: {response.status_code}, Body: {response.text}")

# Main function
def main(req: func.HttpRequest) -> func.HttpResponse:
    logging.info("üîÅ Pull Request Review Function triggered")

    try:
        data = req.get_json()
        pr_id = str(data.get("resource", {}).get("pullRequestId"))
        if not pr_id:
            return func.HttpResponse("No PR ID", status_code=400)

        changed_files = get_changed_files(pr_id)
        if not changed_files:
            logging.warning("No changed files found or failed to fetch.")
            return func.HttpResponse("No changed files", status_code=204)

        for file_path in changed_files:
            review = analyze_file(file_path)
            post_comment(pr_id, file_path, review)

        approve_pull_request(pr_id)
        return func.HttpResponse("Reviewed and approved", status_code=200)

    except Exception as e:
        logging.exception("‚ùå Error during PR review")
        return func.HttpResponse(str(e), status_code=500)
