@model List<AssessmentQuestion> <!-- Replace with the actual type of your model -->

@{
    ViewBag.Title = "Assessment";
    var initialQuestionIndex = 0; // Set the initial question index here
}

<style>
    /* Add your CSS styles here */
</style>

<div id="questionContainer">
    @for (int i = 0; i < Model.Count; i++)
    {
        <div class="question @(i == initialQuestionIndex ? "active" : "")" data-index="@i">
            <h2>@Model[i].QuestionText</h2>
            @if (Model[i].QuestionType == 1) <!-- Single-choice question -->
            {
                foreach (var option in Model[i].Options)
                {
                    <div>
                        <label>
                            <input type="radio" name="Questions[@i].SelectedOption" value="@option.Id" />
                            @option.Text
                        </label>
                    </div>
                }
            }
            else if (Model[i].QuestionType == 2) <!-- Multiple-choice question -->
            {
                foreach (var option in Model[i].Options)
                {
                    <div>
                        <label>
                            <input type="checkbox" name="Questions[@i].SelectedOptions" value="@option.Id" />
                            @option.Text
                        </label>
                    </div>
                }
            }
        </div>
    }
</div>

<div style="text-align: center; margin-top: 20px;"> <!-- Center-align the buttons and add margin -->
    <button id="prevBtn" @(initialQuestionIndex == 0 ? "disabled" : "")>Previous</button>
    <button id="nextBtn" @(initialQuestionIndex == Model.Count - 1 ? "disabled" : "")>Next</button>
    <button id="finishBtn" style="display: none;">Finish</button>
</div>

<script>
    var currentIndex = @initialQuestionIndex;
    var totalQuestions = @Model.Count;
    var answers = new Array(totalQuestions).fill(false); // Initialize an array to track answered questions

    function showQuestion(index) {
        $('.question').removeClass('active');
        $('.question[data-index="' + index + '"]').addClass('active');
    }

    $('#prevBtn').click(function() {
        if (currentIndex > 0) {
            currentIndex--;
            showQuestion(currentIndex);
            updateButtons();
        }
    });

    $('#nextBtn').click(function() {
        if (currentIndex < totalQuestions - 1 && answers[currentIndex]) {
            currentIndex++;
            showQuestion(currentIndex);
            updateButtons();
        }
    });

    $('#finishBtn').click(function() {
        // Handle form submission here
        alert('Form submission logic goes here.');
    });

    function updateButtons() {
        $('#prevBtn').prop('disabled', currentIndex === 0);
        $('#nextBtn').prop('disabled', currentIndex === totalQuestions - 1 || !answers[currentIndex]);
        $('#finishBtn').toggle(currentIndex === totalQuestions - 1);
    }

    // Handle option selection
    $('input[type="radio"], input[type="checkbox"]').change(function() {
        answers[currentIndex] = true;
        updateButtons();
    });

    // Display the initial question immediately
    showQuestion(currentIndex);
    updateButtons();
</script>
