import logging
import azure.functions as func
import os
import json
import requests
from openai import AzureOpenAI

# Set up Azure OpenAI client
client = AzureOpenAI(
    api_key=os.getenv("AZURE_OPENAI_API_KEY"),
    api_version=os.getenv("AZURE_OPENAI_API_VERSION"),  # e.g., "2024-05-01-preview"
    azure_endpoint=os.getenv("AZURE_OPENAI_ENDPOINT")   # e.g., "https://<your-resource>.openai.azure.com/"
)

# Azure DevOps config
ADO_ORG_URL = os.getenv("AZURE_DEVOPS_ORG_URL")  # e.g., https://dev.azure.com/<org>
ADO_PROJECT = os.getenv("AZURE_DEVOPS_PROJECT")
ADO_PAT = os.getenv("AZURE_DEVOPS_PAT")
DEPLOYMENT_NAME = os.getenv("AZURE_OPENAI_DEPLOYMENT_NAME")  # your OpenAI deployment name

def post_comment(pr_id, repo_id, comment):
    url = f"{ADO_ORG_URL}/{ADO_PROJECT}/_apis/git/repositories/{repo_id}/pullRequests/{pr_id}/threads?api-version=7.1-preview.1"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Basic {os.environ['B64_PAT']}"  # base64 encoded string of ":<PAT>"
    }
    body = {
        "comments": [{"content": comment, "commentType": 1}],
        "status": "active"
    }
    requests.post(url, headers=headers, json=body)

def complete_review(prompt):
    response = client.chat.completions.create(
        model=DEPLOYMENT_NAME,
        messages=[
            {"role": "system", "content": "You are an expert code reviewer."},
            {"role": "user", "content": prompt}
        ]
    )
    return response.choices[0].message.content

def main(req: func.HttpRequest) -> func.HttpResponse:
    try:
        data = req.get_json()

        pr_title = data["resource"]["title"]
        pr_description = data["resource"]["description"]
        pr_id = data["resource"]["pullRequestId"]
        repo_id = data["resource"]["repository"]["id"]

        prompt = f"Review the following pull request:\n\nTitle: {pr_title}\n\nDescription:\n{pr_description}"
        review = complete_review(prompt)

        post_comment(pr_id, repo_id, review)

        # Optional: logic to auto-approve/reject based on review text
        return func.HttpResponse("Review posted successfully.", status_code=200)

    except Exception as e:
        logging.exception("Error during PR review")
        return func.HttpResponse(f"Error: {str(e)}", status_code=500)
