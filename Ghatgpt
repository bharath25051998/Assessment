using System.Web.Mvc;
using System.Linq;
using System.Data.Entity; // If using Entity Framework

// Assuming you have these models
public class Question
{
    public int QuestionId { get; set; }
    public int CourseId { get; set; }
    public string CorrectAnswer { get; set; } // Correct answers as a comma-separated string
    public int QuestionType { get; set; } // 1 for single-choice, 2 for multiple-choice
    // ... other properties ...
}

// Entity Framework context
public class YourDbContext : DbContext
{
    public DbSet<Question> Questions { get; set; }
    // ... other DbSets ...
}

public class QuizController : Controller
{
    private YourDbContext dbContext = new YourDbContext();

    [HttpPost]
    public ActionResult SubmitQuiz(QuizSubmission submission)
    {
        int score = 0;
        var questions = dbContext.Questions
                                 .Where(q => q.CourseId == submission.CourseId)
                                 .ToList();

        foreach (var response in submission.Responses)
        {
            var question = questions.FirstOrDefault(q => q.QuestionId == response.QuestionId);
            if (question != null)
            {
                var correctAnswers = question.CorrectAnswer.Split(',').Select(int.Parse).ToList();
                var selectedAnswers = response.SelectedOptions;

                // Check for single-choice question
                if (question.QuestionType == 1 && correctAnswers.Count == 1)
                {
                    if (selectedAnswers.Count == 1 && correctAnswers.Contains(selectedAnswers.Single()))
                    {
                        score++;
                    }
                }
                // Check for multiple-choice question
                else if (question.QuestionType == 2)
                {
                    if (selectedAnswers.Count == correctAnswers.Count && !correctAnswers.Except(selectedAnswers).Any())
                    {
                        score++;
                    }
                }
            }
        }

        // Optionally save the result to the database here

        return Json(new { success = true, score = score });
    }

    protected override void Dispose(bool disposing)
    {
        if (disposing)
        {
            dbContext.Dispose();
        }
        base.Dispose(disposing);
    }
}
