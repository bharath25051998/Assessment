import logging
import azure.functions as func
import json
import openai  # Make sure it's in requirements.txt

def main(req: func.HttpRequest) -> func.HttpResponse:
    logging.info("üöÄ Azure Function triggered.")

    try:
        # Parse request body
        try:
            body = req.get_json()
            logging.info("üì¶ Received payload: %s", json.dumps(body))
        except Exception as e:
            logging.error("‚ùå Failed to parse request body: %s", str(e))
            return func.HttpResponse("Invalid JSON body", status_code=400)

        # Extract details safely
        resource = body.get("resource", {})
        pr_id = resource.get("pullRequestId")
        repo_name = resource.get("repository", {}).get("name", "Unknown")
        project_name = resource.get("repository", {}).get("project", {}).get("name", "Unknown")
        pr_description = resource.get("description", "")

        if not pr_id:
            logging.error("‚ùå pullRequestId missing in payload.")
            return func.HttpResponse("Missing pullRequestId", status_code=400)

        logging.info(f"üßæ PR ID: {pr_id}, Repo: {repo_name}, Project: {project_name}")

        # Make OpenAI API call (dummy example)
        try:
            logging.info("üîó Calling OpenAI API with description: %s", pr_description)

            response = openai.ChatCompletion.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": "You are a code reviewer."},
                    {"role": "user", "content": f"Review this pull request: {pr_description}"}
                ],
                max_tokens=200
            )
            review_comment = response['choices'][0]['message']['content']
            logging.info("‚úÖ OpenAI Response: %s", review_comment)

        except Exception as e:
            logging.error("üî• OpenAI API call failed: %s", str(e))
            return func.HttpResponse("OpenAI call failed", status_code=500)

        return func.HttpResponse(f"PR ID {pr_id} reviewed: {review_comment}", status_code=200)

    except Exception as e:
        logging.exception("üî• Unhandled exception occurred:")
        return func.HttpResponse(f"Internal server error: {str(e)}", status_code=500)
