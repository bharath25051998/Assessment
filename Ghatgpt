import logging
import json
import os
import requests
import azure.functions as func
from openai import AzureOpenAI

# --- Config values (replace with your actual values) ---
AZURE_DEVOPS_ORG = "your-org"       # e.g. rabobank
AZURE_DEVOPS_PROJECT = "your-project"
AZURE_DEVOPS_PAT = "your-pat"       # personal access token with PR permissions
AZURE_OPENAI_ENDPOINT = "https://your-openai-resource.openai.azure.com/"
AZURE_OPENAI_KEY = "your-openai-key"
AZURE_OPENAI_DEPLOYMENT = "gpt-4"   # deployment name in Azure OpenAI

# --- Clients ---
openai_client = AzureOpenAI(
    azure_endpoint=AZURE_OPENAI_ENDPOINT,
    api_key=AZURE_OPENAI_KEY,
    api_version="2024-05-01-preview"
)

def get_changed_files(repo_id, pr_id):
    url = f"https://dev.azure.com/{AZURE_DEVOPS_ORG}/{AZURE_DEVOPS_PROJECT}/_apis/git/repositories/{repo_id}/pullRequests/{pr_id}/iterations/1/changes?api-version=7.0"
    resp = requests.get(url, auth=("", AZURE_DEVOPS_PAT))
    logging.info(f"[DevOps API] GET {url} → {resp.status_code}")
    if resp.status_code != 200:
        logging.error(f"Failed to fetch changed files: {resp.text}")
        return []
    changes = resp.json().get("changes", [])
    files = [c["item"]["path"] for c in changes if "item" in c]
    logging.info(f"Changed files: {files}")
    return files

def analyze_file_with_openai(file_path, file_content):
    prompt = f"""
    Review the following file and provide feedback:
    File: {file_path}
    Content:
    {file_content}

    Respond with:
    - Issues found (if any)
    - Recommendation
    - Approve or Reject
    """
    try:
        response = openai_client.chat.completions.create(
            model=AZURE_OPENAI_DEPLOYMENT,
            messages=[{"role": "system", "content": "You are a code reviewer."},
                      {"role": "user", "content": prompt}],
            max_tokens=500
        )
        result = response.choices[0].message.content
        logging.info(f"[OpenAI] Review for {file_path}: {result}")
        return result
    except Exception as e:
        logging.error(f"[OpenAI] Error analyzing file {file_path}: {e}")
        return "Error analyzing file"

def post_comment(repo_id, pr_id, comment):
    url = f"https://dev.azure.com/{AZURE_DEVOPS_ORG}/{AZURE_DEVOPS_PROJECT}/_apis/git/repositories/{repo_id}/pullRequests/{pr_id}/threads?api-version=7.0"
    data = {
        "comments": [{"parentCommentId": 0, "content": comment, "commentType": 1}],
        "status": 1
    }
    resp = requests.post(url, auth=("", AZURE_DEVOPS_PAT), json=data)
    logging.info(f"[DevOps API] POST comment → {resp.status_code}")
    if resp.status_code != 200:
        logging.error(f"Failed to post comment: {resp.text}")

def set_pr_vote(repo_id, pr_id, vote):
    # vote: 10 = approve, -10 = reject
    url = f"https://dev.azure.com/{AZURE_DEVOPS_ORG}/{AZURE_DEVOPS_PROJECT}/_apis/git/repositories/{repo_id}/pullRequests/{pr_id}/reviewers/{AZURE_DEVOPS_ORG}?api-version=7.0"
    data = {"vote": vote}
    resp = requests.put(url, auth=("", AZURE_DEVOPS_PAT), json=data)
    logging.info(f"[DevOps API] PUT vote={vote} → {resp.status_code}")
    if resp.status_code != 200:
        logging.error(f"Failed to set PR vote: {resp.text}")

async def main(req: func.HttpRequest) -> func.HttpResponse:
    logging.info("Azure Function triggered by DevOps webhook")

    try:
        body = req.get_json()
        logging.info(f"Webhook payload: {json.dumps(body)}")
    except Exception as e:
        logging.error(f"Failed to parse webhook payload: {e}")
        return func.HttpResponse("Invalid payload", status_code=400)

    repo_id = body["resource"]["repository"]["id"]
    pr_id = body["resource"]["pullRequestId"]

    files = get_changed_files(repo_id, pr_id)

    approve = True
    for file_path in files:
        # In real case, fetch file content from DevOps API
        file_content = f"Dummy content of {file_path}"
        review = analyze_file_with_openai(file_path, file_content)

        post_comment(repo_id, pr_id, review)

        if "reject" in review.lower():
            approve = False

    if approve:
        set_pr_vote(repo_id, pr_id, 10)
    else:
        set_pr_vote(repo_id, pr_id, -10)

    return func.HttpResponse("Review completed", status_code=200)
