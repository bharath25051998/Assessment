import logging
import azure.functions as func
import requests
import base64
import json
import os

# ----------------------------
# CONFIGURATION (hardcoded)
# ----------------------------
AZURE_DEVOPS_ORG = "Alshaya-DevOps"
AZURE_DEVOPS_PROJECT = "Mha_Alshaya_AgenticAI_Poc"
AZURE_DEVOPS_PAT = "YOUR_DEVOPS_PAT"
AZURE_OPENAI_ENDPOINT = "https://YOUR_OPENAI_RESOURCE.openai.azure.com/"
AZURE_OPENAI_KEY = "YOUR_OPENAI_KEY"
AZURE_OPENAI_DEPLOYMENT = "gpt-4"
AZURE_OPENAI_API_VERSION = "2025-09-07-preview"

# ----------------------------
# UTILITY FUNCTIONS
# ----------------------------

def get_changed_files(source_branch, target_branch, repo_id):
    logging.info(f"[ChangedFiles] Fetching diff between {source_branch} -> {target_branch}")
    
    url = f"https://dev.azure.com/{AZURE_DEVOPS_ORG}/{AZURE_DEVOPS_PROJECT}/_apis/git/repositories/{repo_id}/diffs/commits"
    params = {
        "baseVersion": target_branch,
        "targetVersion": source_branch,
        "api-version": "7.1-preview.1"
    }
    headers = {
        "Authorization": f"Basic {base64.b64encode(f':{AZURE_DEVOPS_PAT}'.encode()).decode()}"
    }
    
    response = requests.get(url, headers=headers, params=params)
    if response.status_code != 200:
        logging.error(f"[ChangedFiles] Failed to fetch diff: {response.text}")
        return []
    
    changes = response.json().get("changes", [])
    files = [c["item"]["path"] for c in changes]
    logging.info(f"[ChangedFiles] Found files: {files}")
    return files

def get_file_content(repo_id, branch, file_path):
    logging.info(f"[FileContent] Fetching content for {file_path} on branch {branch}")
    url = f"https://dev.azure.com/{AZURE_DEVOPS_ORG}/{AZURE_DEVOPS_PROJECT}/_apis/git/repositories/{repo_id}/items"
    params = {
        "path": file_path,
        "versionDescriptor.version": branch,
        "api-version": "7.1-preview.1"
    }
    headers = {
        "Authorization": f"Basic {base64.b64encode(f':{AZURE_DEVOPS_PAT}'.encode()).decode()}"
    }
    
    response = requests.get(url, headers=headers, params=params)
    if response.status_code != 200:
        logging.error(f"[FileContent] Failed to fetch content: {response.text}")
        return ""
    
    return response.text

def review_with_openai(file_path, content):
    logging.info(f"[OpenAI] Reviewing file {file_path}")
    url = f"{AZURE_OPENAI_ENDPOINT}openai/deployments/{AZURE_OPENAI_DEPLOYMENT}/chat/completions?api-version={AZURE_OPENAI_API_VERSION}"
    
    headers = {
        "Content-Type": "application/json",
        "api-key": AZURE_OPENAI_KEY
    }
    
    system_message = {
        "role": "system",
        "content": "You are a helpful code reviewer. Provide concise review comments if issues exist."
    }
    user_message = {
        "role": "user",
        "content": f"Review the following file:\nFile: {file_path}\nContent:\n{content}"
    }
    
    payload = {
        "messages": [system_message, user_message],
        "temperature": 0.2
    }
    
    response = requests.post(url, headers=headers, json=payload)
    if response.status_code != 200:
        logging.error(f"[OpenAI] Failed: {response.text}")
        return ""
    
    review_text = response.json()["choices"][0]["message"]["content"]
    logging.info(f"[OpenAI] Review result for {file_path}:\n{review_text}")
    return review_text

def post_pr_comment(repo_id, pr_id, comment):
    logging.info(f"[DevOps] Posting comment to PR {pr_id}")
    url = f"https://dev.azure.com/{AZURE_DEVOPS_ORG}/{AZURE_DEVOPS_PROJECT}/_apis/git/repositories/{repo_id}/pullRequests/{pr_id}/threads?api-version=7.1-preview.1"
    headers = {
        "Authorization": f"Basic {base64.b64encode(f':{AZURE_DEVOPS_PAT}'.encode()).decode()}",
        "Content-Type": "application/json"
    }
    payload = {
        "comments": [{"parentCommentId": 0, "content": comment, "commentType": 1}],
        "status": 1
    }
    
    response = requests.post(url, headers=headers, json=payload)
    if response.status_code not in [200, 201]:
        logging.error(f"[DevOps] Failed to post comment: {response.text}")
    else:
        logging.info(f"[DevOps] Comment posted successfully.")

# ----------------------------
# AZURE FUNCTION ENTRY POINT
# ----------------------------

def main(req: func.HttpRequest) -> func.HttpResponse:
    logging.info("[Webhook] Triggered")
    try:
        payload = req.get_json()
        pr = payload["resource"]
        pr_id = pr["pullRequestId"]
        repo_id = pr["repository"]["id"]
        source_branch = pr["sourceRefName"]
        target_branch = pr["targetRefName"]
        
        logging.info(f"[Review] Processing PR {pr_id} {source_branch} -> {target_branch}")
        
        files = get_changed_files(source_branch, target_branch, repo_id)
        if not files:
            logging.warning("[Review] No files to review.")
            return func.HttpResponse("No files to review", status_code=200)
        
        for file_path in files:
            content = get_file_content(repo_id, source_branch, file_path)
            if not content.strip():
                logging.warning(f"[Review] Skipping empty file: {file_path}")
                continue
            
            review_comment = review_with_openai(file_path, content)
            if review_comment.strip():
                post_pr_comment(repo_id, pr_id, f"**Review for {file_path}:**\n{review_comment}")
        
        logging.info("[Review] Completed successfully.")
        return func.HttpResponse("PR reviewed successfully", status_code=200)
    
    except Exception as e:
        logging.error(f"[Error] {str(e)}")
        return func.HttpResponse(f"Error: {str(e)}", status_code=500)
